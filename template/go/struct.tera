{% import "types.tera" as type -%}

{# Main struct type definition#}
{% macro definition(def) -%}
type {{ def.name }} struct {
    {%- for item in def.items %}
    {{ item.name }}   {{ item.array_size | array }}{{ item.item_type | type }}
    {%- endfor %}
}
{%- endmacro definition %}


{# Function body for EncodeStream #}
{% macro encode(def, stream="stream") -%}
    {%- set var = def.name | varname -%}
    {%- for item in def.items %}
        {%- if item.array_size.Constant is defined -%} {# Array of known size #}
            {%- set array_size = item.array_size.Constant -%}
        {%- elif item.array_size.Variable is defined -%} {# Array with size stored as variable #}
            {%- set array_size_var = item.array_size.Variable -%}
        {%- elif item.array_size is string -%} {# Array of unknown size #}
        {%- else -%} {# Not an array #}
            {{- type::encode_item_simple(item=item, var=var, stream=stream) -}}
        {%- endif -%}
    {%- endfor %}
{%- endmacro encode %}


{# Function body for DrcodeStream #}
{% macro decode(def, stream="stream", err="err") %}
    {%- set var = def.name | varname %}
    var err error
    {%- for item in def.items %}
        {%- if item.array_size.Constant is defined -%} {# Array of known size #}
            {%- set array_size = item.array_size.Constant -%}
        {%- elif item.array_size.Variable is defined -%} {# Array with size stored as variable #}
            {%- set array_size_var = item.array_size.Variable -%}
        {%- elif item.array_size is string -%} {# Array of unknown size #}
        {%- else -%} {# Not an array #}
            {{- type::decode_item_simple(item=item, var=var, err=err, stream=stream) -}}
        {%- endif -%}
    {%- endfor %}
    return nil
{%- endmacro decode %}
